LL(zita = as.vector(iniVal),data = data,theta = thetas)
#En la versión rápida se incvocan a estas dos funciones desarrolladas en CPP
#LL2 = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("Loglik",zita.vec,R,fvec,pt.cuad)
#}
#gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("grad",zita.vec,R,fvec,pt.cuad)
#}
M3PL = function(zeta, theta){
exp(zeta[3])/(1+exp(zeta[3]))+ (1-(exp(zeta[3])/(1+exp(zeta[3]))))*(1 + exp((zeta[1]*theta+ zeta[2])))^(-1)
}
start.andrade = function(datos){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#a inicial
b.ini = -(qnorm(pi) / corr.bis)
#b inicial
c.ini = 1 / rep(m,I)
ini.andrade = matrix(c(a.ini,b.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","b","c")
ini.andrade
}
data = as.matrix(read.table(file = "/home/mirt/Comparaciones_Montenegro/3PL/Datasets/Test_10_14_1000.csv",header = T,sep= " "))
perfectos = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ItemsIndsPerfectos/Test_10_14_1000_inds.csv',header = T)
perfectos = perfectos[,1]
thetas = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ThetasPob/Test_10_1000.csv',header = T)
thetas = thetas[,1]
thetas = thetas[-perfectos]
iniVal = start.andrade(data)
iniVal[,2] = iniVal[,2] * iniVal[,1]
iniVal[,3] = qlogis(iniVal[,3])
LL=function(zita,data,theta){
zita = matrix(zita,ncol = 3)
MatrixP = apply(zita,1,M3PL,theta)
MatrixPSum = matrix(0,nrow = nrow(MatrixP),ncol = ncol(MatrixP))
MatrixPSum[data == 1] = log(MatrixP[data == 1])
MatrixPSum[data == 0] = log(1 - MatrixP[data == 0])
sum(MatrixPSum)
}
opt = optim(par=zita.vec,fn=LL,method= "BFGS",theta,data,control=list(maxit=20),hessian = T)
b=as.vector(iniVal)
matrix(b,ncol = 3)
LL(zita = as.vector(iniVal),data = data,theta = thetas)
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
LL=function(zita,data,theta){
zita = matrix(zita,ncol = 3)
MatrixP = apply(zita,1,M3PL,theta)
MatrixPSum = matrix(0,nrow = nrow(MatrixP),ncol = ncol(MatrixP))
MatrixPSum[data == 1] = log(MatrixP[data == 1])
MatrixPSum[data == 0] = log(1 - MatrixP[data == 0])
- sum(MatrixPSum)
}
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
opt$par
colnames(iniVal) = c("a","d","c")
iniVal = start.andrade(data)
iniVal[,2] = iniVal[,2] * iniVal[,1]
colnames(iniVal) = c("a","d","c")
LL=function(zita,data,theta){
zita = matrix(zita,ncol = 3)
MatrixP = apply(zita,1,M3PL,theta)
MatrixPSum = matrix(0,nrow = nrow(MatrixP),ncol = ncol(MatrixP))
MatrixPSum[data == 1] = log(MatrixP[data == 1])
MatrixPSum[data == 0] = log(1 - MatrixP[data == 0])
- sum(MatrixPSum)
}
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
opt$par
optimiLL = function(zita,thetas,data,LL){
zita = as.vector(zita)
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
matrix(opt$par,ncol = 2)
}
optimiLL(zita = iniVal,thetas = thetas,data = data,LL = LL)
optimiLL = function(zita,thetas,data,LL){
zita = as.vector(zita)
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
matrix(opt$par,ncol = 3)
}
optimiLL(zita = iniVal,thetas = thetas,data = data,LL = LL)
#En la versión rápida se incvocan a estas dos funciones desarrolladas en CPP
#LL2 = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("Loglik",zita.vec,R,fvec,pt.cuad)
#}
#gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("grad",zita.vec,R,fvec,pt.cuad)
#}
#Función de valores iniciales de andrade
#estos se usan como valores iniciales para el optimizador
start.andrade = function(datos){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#a inicial
b.ini = -(qnorm(pi) / corr.bis)
#b inicial
c.ini = 1 / rep(m,I)
ini.andrade = matrix(c(a.ini,b.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","b","c")
ini.andrade
}
#Funciónde probabilidad
M3PL = function(zeta, theta){
exp(zeta[3])/(1+exp(zeta[3]))+ (1-(exp(zeta[3])/(1+exp(zeta[3]))))*(1 + exp((zeta[1]*theta+ zeta[2])))^(-1)
}
#Carga de datos
data = as.matrix(read.table(file = "/home/mirt/Comparaciones_Montenegro/3PL/Datasets/Test_10_14_1000.csv",header = T,sep= " "))
#Inds perfectos para se eliminados de los thetas
perfectos = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ItemsIndsPerfectos/Test_10_14_1000_inds.csv',header = T)
perfectos = perfectos[,1]
#carga de thetas y eliminación de los perfectos
thetas = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ThetasPob/Test_10_1000.csv',header = T)
thetas = thetas[,1]
thetas = thetas[-perfectos]
#Valores iniciales de andrade
iniVal = start.andrade(data)
iniVal[,2] = iniVal[,2] * iniVal[,1]
colnames(iniVal) = c("a","d","c")
#Función de logverosimilitud
LL=function(zita,data,theta){
zita = matrix(zita,ncol = 3)
MatrixP = apply(zita,1,M3PL,theta)
MatrixPSum = matrix(0,nrow = nrow(MatrixP),ncol = ncol(MatrixP))
MatrixPSum[data == 1] = log(MatrixP[data == 1])
MatrixPSum[data == 0] = log(1 - MatrixP[data == 0])
- sum(MatrixPSum)
}
#Función que optimiza
optimiLL = function(zita,thetas,data,LL){
zita = as.vector(zita)
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
matrix(opt$par,ncol = 3)
}
#Llamado a función que optimiza
optimiLL(zita = iniVal,thetas = thetas,data = data,LL = LL)
iniVal[,3] = iniVal[,3]
#En la versión rápida se incvocan a estas dos funciones desarrolladas en CPP
#LL2 = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("Loglik",zita.vec,R,fvec,pt.cuad)
#}
#gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("grad",zita.vec,R,fvec,pt.cuad)
#}
#Función de valores iniciales de andrade
#estos se usan como valores iniciales para el optimizador
start.andrade = function(datos){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#a inicial
b.ini = -(qnorm(pi) / corr.bis)
#b inicial
c.ini = 1 / rep(m,I)
ini.andrade = matrix(c(a.ini,b.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","b","c")
ini.andrade
}
#Funciónde probabilidad
M3PL = function(zeta, theta){
exp(zeta[3])/(1+exp(zeta[3]))+ (1-(exp(zeta[3])/(1+exp(zeta[3]))))*(1 + exp((zeta[1]*theta+ zeta[2])))^(-1)
}
#Carga de datos
data = as.matrix(read.table(file = "/home/mirt/Comparaciones_Montenegro/3PL/Datasets/Test_10_14_1000.csv",header = T,sep= " "))
#Inds perfectos para se eliminados de los thetas
perfectos = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ItemsIndsPerfectos/Test_10_14_1000_inds.csv',header = T)
perfectos = perfectos[,1]
#carga de thetas y eliminación de los perfectos
thetas = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ThetasPob/Test_10_1000.csv',header = T)
thetas = thetas[,1]
thetas = thetas[-perfectos]
#Valores iniciales de andrade
iniVal = start.andrade(data)
iniVal[,2] = iniVal[,2] * iniVal[,1]
iniVal[,3] = iniVal[,3]
colnames(iniVal) = c("a","d","c")
#Función de logverosimilitud
LL=function(zita,data,theta){
zita = matrix(zita,ncol = 3)
MatrixP = apply(zita,1,M3PL,theta)
MatrixPSum = matrix(0,nrow = nrow(MatrixP),ncol = ncol(MatrixP))
MatrixPSum[data == 1] = log(MatrixP[data == 1])
MatrixPSum[data == 0] = log(1 - MatrixP[data == 0])
- sum(MatrixPSum)
}
#Función que optimiza
optimiLL = function(zita,thetas,data,LL){
zita = as.vector(zita)
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
LLsalida = matrix(opt$par,ncol = 3)
colnames(LLsalida) = colnames(iniVal) = c("a","d","c")
}
#Llamado a función que optimiza
optimiLL(zita = iniVal,thetas = thetas,data = data,LL = LL)
#En la versión rápida se incvocan a estas dos funciones desarrolladas en CPP
#LL2 = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("Loglik",zita.vec,R,fvec,pt.cuad)
#}
#gradLoglik = function(zita.vec,R,fvec,pt.cuad,nitems,and){
#  .Call("grad",zita.vec,R,fvec,pt.cuad)
#}
#Función de valores iniciales de andrade
#estos se usan como valores iniciales para el optimizador
start.andrade = function(datos){
I = ncol(datos)
P = nrow(datos)
m = 5
#scores
T = apply(datos,1,sum)
#correlacion biserial
corr.bis = rep(NA,I)
for(i in 1:I){
corr.bis[i]  = cor(datos[,i],T,method="pearson")
}
#a inicial
a.ini = sqrt(corr.bis^2/(1-(corr.bis^2)))
#proporcion de aciertos
pi = as.vector(apply(datos,2,sum) / P)
#a inicial
b.ini = -(qnorm(pi) / corr.bis)
#b inicial
c.ini = 1 / rep(m,I)
ini.andrade = matrix(c(a.ini,b.ini,c.ini),ncol=3)
colnames(ini.andrade) = c("a","b","c")
ini.andrade
}
#Funciónde probabilidad
M3PL = function(zeta, theta){
exp(zeta[3])/(1+exp(zeta[3]))+ (1-(exp(zeta[3])/(1+exp(zeta[3]))))*(1 + exp((zeta[1]*theta+ zeta[2])))^(-1)
}
#Carga de datos
data = as.matrix(read.table(file = "/home/mirt/Comparaciones_Montenegro/3PL/Datasets/Test_10_14_1000.csv",header = T,sep= " "))
#Inds perfectos para se eliminados de los thetas
perfectos = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ItemsIndsPerfectos/Test_10_14_1000_inds.csv',header = T)
perfectos = perfectos[,1]
#carga de thetas y eliminación de los perfectos
thetas = read.table('/home/mirt/Comparaciones_Montenegro/3PL/ThetasPob/Test_10_1000.csv',header = T)
thetas = thetas[,1]
thetas = thetas[-perfectos]
#Valores iniciales de andrade
iniVal = start.andrade(data)
iniVal[,2] = iniVal[,2] * iniVal[,1]
iniVal[,3] = iniVal[,3]
colnames(iniVal) = c("a","d","c")
#Función de logverosimilitud
LL=function(zita,data,theta){
zita = matrix(zita,ncol = 3)
MatrixP = apply(zita,1,M3PL,theta)
MatrixPSum = matrix(0,nrow = nrow(MatrixP),ncol = ncol(MatrixP))
MatrixPSum[data == 1] = log(MatrixP[data == 1])
MatrixPSum[data == 0] = log(1 - MatrixP[data == 0])
- sum(MatrixPSum)
}
#Función que optimiza
optimiLL = function(zita,thetas,data,LL){
zita = as.vector(zita)
opt = optim(par=iniVal,fn=LL,method= "BFGS",data = data,theta=thetas,control=list(maxit=20),hessian = T)
LLsalida = matrix(opt$par,ncol = 3)
colnames(LLsalida) = colnames(iniVal) = c("a","d","c")
LLsalida
}
#Llamado a función que optimiza
optimiLL(zita = iniVal,thetas = thetas,data = data,LL = LL)
library(mirt)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv")
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv")
View(data)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
library(mirt)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
estimationPCA = function(data){
y.math = y = data
pca.math <- PCA(y.math,ncp=3)
pca.math$eig
barplot(pca.math$eig$eigen,main= "Eigenvalues plot of math")
plot.PCA(pca.math,cex=0.1, axes = c(1, 2), choix = "var")
var.info= pca.math$var
# first component
y.c.math = pca.math$ind$coord[,1]
theta.e = y.c.math/sd(y.c.math)
# correlation
#cor(theta,theta.e)
# glm estimation
p = ncol(data)
item.p = matrix(NA,ncol(data), 2)
for (i in 1:p){
item.p[i,] = glm(y[,i] ~ theta.e,  family=binomial(link=logit))$coeff
}
a.e = item.p[, -1]
d.e = item.p[, 1]
# second check
# estimated model probabilities
N = nrow(data)
# linear predictor
eta.e =  t(a.e %*%t(theta.e) + matrix(d.e,p,N))
# probabilities of correct response of the model
prob.m = 1/(1+exp(-eta.e))
# column margins
margin.y.col = apply(y,2,mean)
margin.p.col = apply(prob.m,2,mean)
abs.erro.col = abs(margin.y.col -  margin.p.col)
max( abs.erro.col)
#  1.078561e-09
min(abs.erro.col)
#  2.220446e-16
mean(abs.erro.col)
# 1.008755e-10
# row margins
# column margins
margin.y.row = apply(y,1,mean)
margin.p.row = apply(prob.m,1,mean)
abs.erro.row = abs(margin.y.row -  margin.p.row)
max( abs.erro.row)
# 0.100044
min(abs.erro.row)
#  8.13469e-06
mean(abs.erro.row)
# 0.01548161
# clasical score v.s. estimated score (provisional)
y.total = apply(y,1,sum)
# adjusted score (true score)
y.t = apply(y* matrix(margin.y.col,N,p, byrow=TRUE),1,sum)
zita =  item.p[,c(2,1)]
zita = cbind(zita,rep(0,nrow(item.p)))
list(thetaPCA = theta.e ,zita =zita)
}
estimationPCA = function(data){
y.math = y = data
pca.math <- PCA(y.math,ncp=3)
pca.math$eig
barplot(pca.math$eig$eigen,main= "Eigenvalues plot of math")
plot.PCA(pca.math,cex=0.1, axes = c(1, 2), choix = "var")
var.info= pca.math$var
# first component
y.c.math = pca.math$ind$coord[,1]
theta.e = y.c.math/sd(y.c.math)
# correlation
#cor(theta,theta.e)
# glm estimation
p = ncol(data)
item.p = matrix(NA,ncol(data), 2)
for (i in 1:p){
item.p[i,] = glm(y[,i] ~ theta.e,  family=binomial(link=logit))$coeff
}
a.e = item.p[, -1]
d.e = item.p[, 1]
# second check
# estimated model probabilities
N = nrow(data)
# linear predictor
eta.e =  t(a.e %*%t(theta.e) + matrix(d.e,p,N))
# probabilities of correct response of the model
prob.m = 1/(1+exp(-eta.e))
# column margins
margin.y.col = apply(y,2,mean)
margin.p.col = apply(prob.m,2,mean)
abs.erro.col = abs(margin.y.col -  margin.p.col)
max( abs.erro.col)
#  1.078561e-09
min(abs.erro.col)
#  2.220446e-16
mean(abs.erro.col)
# 1.008755e-10
# row margins
# column margins
margin.y.row = apply(y,1,mean)
margin.p.row = apply(prob.m,1,mean)
abs.erro.row = abs(margin.y.row -  margin.p.row)
max( abs.erro.row)
# 0.100044
min(abs.erro.row)
#  8.13469e-06
mean(abs.erro.row)
# 0.01548161
# clasical score v.s. estimated score (provisional)
y.total = apply(y,1,sum)
# adjusted score (true score)
y.t = apply(y* matrix(margin.y.col,N,p, byrow=TRUE),1,sum)
zita =  item.p[,c(2,1)]
zita = cbind(zita,rep(0,nrow(item.p)))
list(thetaPCA = theta.e ,zita =zita)
}
library(mirt)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
inicio = Sys.time()
estimationPCA(data)
Sys.time() - inicio
library("FactoMineR", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")
estimationPCA = function(data){
y.math = y = data
pca.math <- PCA(y.math,ncp=3)
pca.math$eig
barplot(pca.math$eig$eigen,main= "Eigenvalues plot of math")
plot.PCA(pca.math,cex=0.1, axes = c(1, 2), choix = "var")
var.info= pca.math$var
# first component
y.c.math = pca.math$ind$coord[,1]
theta.e = y.c.math/sd(y.c.math)
# correlation
#cor(theta,theta.e)
# glm estimation
p = ncol(data)
item.p = matrix(NA,ncol(data), 2)
for (i in 1:p){
item.p[i,] = glm(y[,i] ~ theta.e,  family=binomial(link=logit))$coeff
}
a.e = item.p[, -1]
d.e = item.p[, 1]
# second check
# estimated model probabilities
N = nrow(data)
# linear predictor
eta.e =  t(a.e %*%t(theta.e) + matrix(d.e,p,N))
# probabilities of correct response of the model
prob.m = 1/(1+exp(-eta.e))
# column margins
margin.y.col = apply(y,2,mean)
margin.p.col = apply(prob.m,2,mean)
abs.erro.col = abs(margin.y.col -  margin.p.col)
max( abs.erro.col)
#  1.078561e-09
min(abs.erro.col)
#  2.220446e-16
mean(abs.erro.col)
# 1.008755e-10
# row margins
# column margins
margin.y.row = apply(y,1,mean)
margin.p.row = apply(prob.m,1,mean)
abs.erro.row = abs(margin.y.row -  margin.p.row)
max( abs.erro.row)
# 0.100044
min(abs.erro.row)
#  8.13469e-06
mean(abs.erro.row)
# 0.01548161
# clasical score v.s. estimated score (provisional)
y.total = apply(y,1,sum)
# adjusted score (true score)
y.t = apply(y* matrix(margin.y.col,N,p, byrow=TRUE),1,sum)
zita =  item.p[,c(2,1)]
zita = cbind(zita,rep(0,nrow(item.p)))
list(thetaPCA = theta.e ,zita =zita)
}
library(mirt)
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
inicio = Sys.time()
estimationPCA(data)
Sys.time() - inicio
inicio = Sys.time()
fit = mirt(data,model = 1,itemtype = "2PL")
Sys.time() - inicio
inicio = Sys.time()
a=estimationPCA(data)
Sys.time() - inicio
data = read.table(file = "/home/mirt/Comparaciones_Montenegro/2PL/Datasets/Test_100_10_10000.csv",header = T)
View(data)
class(data)
data = as.matrix(data)
class(data)
dim(data)
library(shiny)
setwd("/home/mirt/Git/Coursera/DPP_app_stations_ideam")
runApp()
library(shiny)
setwd("/home/mirt/Git/Coursera/DPP_app_stations_ideam")
runApp()
runApp()
